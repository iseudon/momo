const generateChart = () => {
  try {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    // スケールファクターを定義（1.5倍の解像度に調整）
    const scale = 1.5;

    // ... (月の範囲を決定する既存のコード)

    // キャンバスのサイズを設定
    const monthWidth = 200 * scale;
    canvas.width = monthCount * monthWidth;
    canvas.height = 400 * scale;

    const width = canvas.width;
    const height = canvas.height;

    // コンテキストのスケールを設定
    ctx.scale(scale, scale);

    // 背景を描画
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(0, 0, width / scale, height / scale);

    // タイトルを描画
    ctx.fillStyle = '#4A4A4A';
    ctx.font = `bold ${18}px Arial`;
    ctx.textAlign = 'center';
    ctx.fillText('桃の食べ頃カレンダー', width / (2 * scale), 25);

    // 月と旬の区切り線を描画
    ctx.strokeStyle = '#4A4A4A';
    ctx.lineWidth = 1;
    ctx.font = `${14}px Arial`;
    ctx.textAlign = 'center';

    // 線とラベルの間の空白
    const lineMargin = 2 * scale;

    // 始端の左の線を描画
    ctx.beginPath();
    ctx.moveTo(lineMargin / scale, 50);
    ctx.lineTo(lineMargin / scale, height / scale);
    ctx.stroke();

    for (let i = 0; i <= monthCount; i++) {
      const month = displayStartMonth + i;
      const x = i * (monthWidth / scale);

      // 月の境界線（実線）
      ctx.beginPath();
      ctx.moveTo(x, 50);
      ctx.lineTo(x, height / scale);
      ctx.stroke();

      // 月のラベル
      if (i < monthCount) {
        ctx.fillText(`${month}月`, x + (monthWidth / scale) / 2, 40);
      }

      // 旬の区切り線（実線、薄い色）
      if (i < monthCount) {
        ctx.strokeStyle = '#CCCCCC';
        for (let j = 1; j <= 2; j++) {
          const subX = x + ((monthWidth / scale) * j / 3);
          ctx.beginPath();
          ctx.moveTo(subX, 50);
          ctx.lineTo(subX, height / scale);
          ctx.stroke();
        }
        ctx.strokeStyle = '#4A4A4A';
      }
    }

    const labelHeight = 25 * scale;

    // 桃のラベルを描画
    ctx.lineWidth = 1;
    let rows = [];
    peaches.value.forEach((peach) => {
      // ... (既存のコード)
    });

    // 各行のラベルを描画
    rows.forEach((row, rowIndex) => {
      const y = 60 + rowIndex * ((labelHeight / scale) + 10);

      row.forEach(({ startX, endX, peach, labelWidth }) => {
        // ... (グラデーションの作成)

        // 線とラベルの間に空白を設ける
        const adjustedStartX = Math.max(startX, lineMargin / scale);
        const adjustedEndX = Math.min(endX, width / scale - lineMargin / scale);
        const adjustedLabelWidth = adjustedEndX - adjustedStartX;

        if (peach.texture === 'soft') {
          // 柔らかい桃の場合、両端が丸い形状を描画
          const radius = (labelHeight / scale) / 2;
          ctx.beginPath();
          ctx.moveTo(adjustedStartX + radius, y);
          ctx.lineTo(adjustedEndX - radius, y);
          ctx.quadraticCurveTo(adjustedEndX, y, adjustedEndX, y + radius);
          ctx.lineTo(adjustedEndX, y + (labelHeight / scale) - radius);
          ctx.quadraticCurveTo(adjustedEndX, y + (labelHeight / scale), adjustedEndX - radius, y + (labelHeight / scale));
          ctx.lineTo(adjustedStartX + radius, y + (labelHeight / scale));
          ctx.quadraticCurveTo(adjustedStartX, y + (labelHeight / scale), adjustedStartX, y + (labelHeight / scale) - radius);
          ctx.lineTo(adjustedStartX, y + radius);
          ctx.quadraticCurveTo(adjustedStartX, y, adjustedStartX + radius, y);
          ctx.fill();
        } else {
          // 硬い桃の場合、通常の四角形を描画
          ctx.fillRect(adjustedStartX, y, adjustedLabelWidth, labelHeight / scale);
        }

        // 桃のラベルのテキスト
        ctx.fillStyle = '#000000';
        ctx.font = `${12}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        // テキストが長い場合は省略
        let text = peach.name;
        if (ctx.measureText(text).width > adjustedLabelWidth - 10) {
          text = text.substring(0, 5) + '...';
        }
        ctx.fillText(text, adjustedStartX + adjustedLabelWidth / 2, y + (labelHeight / scale) / 2);
      });
    });

    // キャンバスを画像データURLに変換
    const imageDataUrl = canvas.toDataURL('image/png');

    // 新しいタブで画像を開く
    const newTab = window.open();
    newTab.document.write(`<img src="${imageDataUrl}" alt="Peach Chart" style="width: ${width / scale}px; height: ${height / scale}px;">`);
    newTab.document.close();

    console.log('Chart generated successfully');
  } catch (error) {
    console.error('Error generating chart:', error);
  }
};
